export default class FarmScene extends Phaser.Scene {
  constructor() {
    super({ key: 'FarmScene' });
  }

  preload() {
    this.load.image('farmBg', 'assets/images/farm-bg.png');

    // ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏û‡∏∑‡∏ä
    this.load.image('icon_rice', 'assets/images/crops/rice.png');
    this.load.image('icon_bean', 'assets/images/crops/bean.png');
    this.load.image('icon_vege', 'assets/images/crops/vege.png');
  }

  create() {
    this.add.image(400, 300, 'farmBg').setDepth(-1);

    this.restoreScore = this.registry.get('restoreScore') || 0;
    this.day = 1;
    this.totalDays = 7;
    this.waterAvailable = this.restoreScore * 2;
    this.score = 0;

    this.add.text(20, 20, '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ô‡πâ‡∏≥‡πÉ‡∏ô‡∏ü‡∏≤‡∏£‡πå‡∏°', { fontSize: '22px', fill: '#fff' });
    this.dayText = this.add.text(20, 60, '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: 1 / 7', { fontSize: '18px', fill: '#ffffcc' });
    this.waterText = this.add.text(20, 90, `‡∏ô‡πâ‡∏≥‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ${this.waterAvailable}`, { fontSize: '18px', fill: '#ffffcc' });
    this.scoreText = this.add.text(20, 120, `‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏∞‡∏™‡∏°: 0`, { fontSize: '18px', fill: '#ffffcc' });
    this.weatherText = this.add.text(20, 150, '', { fontSize: '18px', fill: '#ffcc00' });

    // üß± ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏û‡∏≤‡∏∞‡∏õ‡∏•‡∏π‡∏Å
    this.plots = [
      { crop: null, days: 0, water: 0 },
      { crop: null, days: 0, water: 0 },
      { crop: null, days: 0, water: 0 }
    ];
    this.plotTexts = [];
    this.plotSprites = [];

    for (let i = 0; i < this.plots.length; i++) {
      const x = 150 + i * 220;
      this.add.rectangle(x, 400, 180, 100, 0x567d46);
      const text = this.add.text(x - 60, 380, `‡πÅ‡∏õ‡∏•‡∏á ${i + 1}: ‡∏ß‡πà‡∏≤‡∏á`, { fontSize: '14px', fill: '#fff' });
      this.plotTexts.push(text);

      // üåæ ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏û‡∏∑‡∏ä‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á (‡∏ã‡πà‡∏≠‡∏ô‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô)
      const sprite = this.add.image(x, 400, '').setVisible(false).setScale(0.25);
      this.plotSprites.push(sprite);
    }

    // ‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏•‡∏π‡∏Å‡∏û‡∏∑‡∏ä
    this.createCropButton(100, 250, '‡∏Ç‡πâ‡∏≤‡∏ß', 'rice', 4, 20);
    this.createCropButton(300, 250, '‡∏ñ‡∏±‡πà‡∏ß', 'bean', 3, 10);
    this.createCropButton(500, 250, '‡∏ú‡∏±‡∏Å', 'vege', 2, 5);

    // ‡∏õ‡∏∏‡πà‡∏°‡πÑ‡∏õ‡∏ß‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
    this.nextDayBtn = this.add.rectangle(700, 550, 120, 40, 0x333333).setInteractive();
    this.add.text(660, 540, '‡∏ß‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ >>', { fontSize: '14px', fill: '#ffffff' });

    this.nextDayBtn.on('pointerdown', () => {
      if (this.day < this.totalDays) {
        this.day++;
        this.advanceDay();
      } else {
        this.scene.start('SummaryScene', { score: this.score });
      }
    });

    this.advanceDay(); // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô‡πÅ‡∏£‡∏Å
  }

  createCropButton(x, y, label, cropType, growDays, waterPerDay) {
    const btn = this.add.rectangle(x, y, 140, 40, 0x228b22).setInteractive();
    this.add.text(x - 35, y - 10, label, { fontSize: '14px', fill: '#fff' });

    btn.on('pointerdown', () => {
      const emptyIndex = this.plots.findIndex(p => p.crop === null);
      if (emptyIndex === -1) {
        this.weatherText.setText('ü™¥ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß!');
        return;
      }

      this.plots[emptyIndex] = {
        crop: cropType,
        days: growDays,
        water: waterPerDay
      };

      // ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏û‡∏∑‡∏ä‡πÉ‡∏ô‡πÅ‡∏õ‡∏•‡∏á
      this.plotSprites[emptyIndex]
        .setTexture('icon_' + cropType)
        .setVisible(true);

      this.plotTexts[emptyIndex].setText(`‡πÅ‡∏õ‡∏•‡∏á ${emptyIndex + 1}: ${label}`);
    });
  }

  advanceDay() {
    const rain = Phaser.Math.Between(0, 1);
    const drought = Phaser.Math.Between(0, 10) < 2;

    if (drought) {
      this.weatherText.setText('üî• ‡∏†‡∏±‡∏¢‡πÅ‡∏•‡πâ‡∏á! ‡∏ô‡πâ‡∏≥‡∏•‡∏î 20 ‡∏´‡∏ô‡πà‡∏ß‡∏¢');
      this.waterAvailable = Math.max(0, this.waterAvailable - 20);
    } else if (rain) {
      this.weatherText.setText('üåß ‡∏ù‡∏ô‡∏ï‡∏Å! ‡∏ô‡πâ‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏° 15 ‡∏´‡∏ô‡πà‡∏ß‡∏¢');
      this.waterAvailable += 15;
    } else {
      this.weatherText.setText('‚òÄÔ∏è ‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏õ‡∏Å‡∏ï‡∏¥');
    }

    for (let i = 0; i < this.plots.length; i++) {
      const plot = this.plots[i];

      if (plot.crop !== null) {
        if (this.waterAvailable >= plot.water) {
          this.waterAvailable -= plot.water;
          plot.days--;

          if (plot.days <= 0) {
            this.score += 30;
            this.plotTexts[i].setText(`‡πÅ‡∏õ‡∏•‡∏á ${i + 1}: ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡πÅ‡∏•‡πâ‡∏ß!`);
            this.plotSprites[i].setVisible(false);
            this.plots[i] = { crop: null, days: 0, water: 0 };
          } else {
            this.plotTexts[i].setText(`‡πÅ‡∏õ‡∏•‡∏á ${i + 1}: ${plot.crop}, ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${plot.days} ‡∏ß‡∏±‡∏ô`);
          }
        } else {
          this.plotTexts[i].setText(`‡πÅ‡∏õ‡∏•‡∏á ${i + 1}: ‡∏ô‡πâ‡∏≥‡πÑ‡∏°‡πà‡∏û‡∏≠!`);
        }
      }
    }

    this.dayText.setText(`‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${this.day} / ${this.totalDays}`);
    this.waterText.setText(`‡∏ô‡πâ‡∏≥‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ${this.waterAvailable}`);
    this.scoreText.setText(`‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏∞‡∏™‡∏°: ${this.score}`);
  }
}
